# Объявление переиспользуемых объектов
x-backend: &backend
  restart: always
  environment:
    POSTGRES_HOST_LOCAL: postgres       # ← здесь явно
    POSTGRES_PORT_LOCAL: 5432           # ← здесь явно
    POSTGRES_USER: ${POSTGRES_USER}     # из .env
    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    POSTGRES_DB: ${POSTGRES_DB}
  ports:
    - "${APP_PORT}:${APP_PORT}"
  depends_on:
    - postgres
  networks:
    - backend_net

# Сервисы
services:
  postgres:
    profiles:
      - dev
      - prod
      # Используем образ Postgres
    image: postgres:15-alpine
    container_name: myapp_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data

    # Порт 5432 внутри контейнера → 5433 на хосте,
    # чтобы не конфликтовать с локальным Postgres на 5432:
    ports:
      - "${POSTGRES_PORT}:5432"  # Порт на хосте:5432 → порт в контейнере:5432
    networks:
      - backend_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend_dev:
    profiles:
      - dev
    tmpfs:
      - /tmp
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: backend_nest_dev
    restart: always
    # Переменные для подключения к БД
    environment:
      NODE_ENV: development
      POSTGRES_HOST_LOCAL: postgres       # имя сервиса
      POSTGRES_PORT_LOCAL: 5432           # порт внутри контейнера
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    depends_on:
      postgres:
        condition: service_healthy        # дождёмся, пока БД будет готова
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    networks:
      - backend_net

  backend_prod:
    <<: *backend
    profiles:
      - prod
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: backend_nest_prod
    restart: always
    environment:
      # Переменные для подключения к БД
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      # Публичный порт приложения
      PORT: ${APP_PORT}
      NODE_ENV: production
    # Пробросим порт NestJS (обычно 3000) на хост:
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      - postgres
    networks:
      - backend_net

  _dummy:
    image: alpine
    profiles:
      - dev
      - prod

volumes:
  pgdata:

networks:
  backend_net:
    driver: bridge